<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>john-hearn.info</title>
    <description>A Jekyll theme for content-rich sites</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 27 Aug 2018 12:00:44 +0200</pubDate>
    <lastBuildDate>Mon, 27 Aug 2018 12:00:44 +0200</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Quantum Computing Primer</title>
        <description>&lt;p&gt;&lt;img src=&quot;images/header.jpg&quot; alt=&quot;Header Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quantum comuting is coming, in fact it’s on our doorstep.&lt;/p&gt;

&lt;p&gt;But there’s a problem: a lack of quantum software engineers. There is a reason for this. At the moment much of the literature is either popular science, so watered down to be useless for practical purposes, or, at the other extreme, written &lt;em&gt;by&lt;/em&gt; academics &lt;em&gt;for&lt;/em&gt; academics making it tough going for many programmers to follow.&lt;/p&gt;

&lt;p&gt;Nonetheless software engineers are exactly what the field needs because we build abstractions and abstractions are sorely missing. Quantum computing needs YOU to build new constructs that adedemia hasn’t even thought of yet. This article introduces the general concepts behind quantum computing which hopefully any programmer new to quantum computing can understand.&lt;/p&gt;

&lt;h2 id=&quot;a-bit-of-history&quot;&gt;A Bit of History&lt;/h2&gt;

&lt;p&gt;It shouldn’t be necessary to explain to programmers what a &lt;strong&gt;bit&lt;/strong&gt; is. It’s a concept so fundamental to computing that it’s taken almost for granted in modern day programming.&lt;/p&gt;

&lt;p&gt;We often forget that in the earliest computers each bit of information required a clunky, power-hungry, sausage-sized vacuum tube. Programming in those days was low-level bit twiddling and was inherently error-prone. In time vacuuum tubes were replaced by individual transistors which were gradually miniaturised and packed more and more tightly into the integrated circuits which are the processors of today’s laptops and smartphones.&lt;/p&gt;

&lt;p&gt;Today’s quantum computers are clunky, power-hungry and error-prone, like the vacuum tubes in their day. Programming them is basically low-level bit twiddling and they operation is inherently error prone. Do not be fooled into thinking that quantum computing is a step backwards, however, in fact we’ll see that the strange consequences of quantum mechanics can be harnessed to bring immense benefits and even tiny quantum systems can produce results that traditional computing cannot. The computational power that they will represent in the comming years is unimaginable.&lt;/p&gt;

&lt;h2 id=&quot;whats-a-bit-anyway&quot;&gt;What’s a Bit Anyway?&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;bit&lt;/em&gt; represents a binary piece of information, the answer to a yes/no question. We are used to seeing binary information represented with other symbols too: yes/no, 1/0, true/false or maybe even on/off. We’ll call the possible values &lt;em&gt;states&lt;/em&gt;, that is, an “on” state or a “true” state, etc.&lt;/p&gt;

&lt;p&gt;Binary data can also be be represented geometrically, for example as an arrow pointing up for one binary state and an arrow pointing down for the other, like the hour hand of a clock at 12pm and 6pm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/up.png&quot; alt=&quot;Up&quot; /&gt;   &lt;img src=&quot;images/down.png&quot; alt=&quot;Down&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this in mind we can interpret the familiar NOT operator or &lt;em&gt;gate&lt;/em&gt; as simply flipping the arrow through 180º, from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; state to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; state and vice versa&lt;label for=&quot;spin&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;spin&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; terminology is also reminicent of one of the quantum mechanical properties of particles called &lt;a href=&quot;https://en.wikipedia.org/wiki/Spin_(physics)&quot;&gt;spin&lt;/a&gt;. &lt;/span&gt;. The NOT gate, then, is an example of a &lt;em&gt;unitary operation&lt;/em&gt; on the bit, that is to say, it changes the direction of the arrow but not its length. In fact in the classical world there are only two one-bit operations, the other being the &lt;em&gt;identity&lt;/em&gt; operator which leaves the bit in its previous state and obviously doesn’t affect the length of the arrow either.&lt;/p&gt;

&lt;h2 id=&quot;extending-the-notion-of-a-bit-to-the-quantum-world&quot;&gt;Extending the Notion of a Bit to the Quantum World&lt;/h2&gt;

&lt;p&gt;Now take a moment to imagine that the arrow is not confined to just the &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; states, as it is in the classical world, but can point in &lt;em&gt;any&lt;/em&gt; direction, up, down, left, right, front and back. The arrow is evidently not restricted to just two mutually exclusive binary states, as in the case of the classical bit, but rather any point over the whole surface of a sphere&lt;label for=&quot;bloch-sphere&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;bloch-sphere&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This sphere is known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bloch_sphere&quot;&gt;Bloch sphere&lt;/a&gt;. &lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/bloch-sphere.png&quot; alt=&quot;Bloch sphere&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ve just imagined the possible states of a &lt;strong&gt;quantum bit&lt;/strong&gt;, or &lt;strong&gt;qubit&lt;/strong&gt; as it is usually called.&lt;/p&gt;

&lt;p&gt;As an analogy, take the surface of the earth with the north and south poles representing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; directions. Every location on the surface of the earth would represent a different state, given, for example, by its GPS coordinates.&lt;/p&gt;

&lt;p&gt;Now we can imagine a whole new family of gates which not only flip the arrow around 180º (like the classical NOT gate) but can rotate it by different angles into any direction&lt;label for=&quot;gates&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;gates&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;In the quantum computing literature these gates have (cryptic) names like &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Z&lt;/code&gt;. In reality they are all nothing more than rotations of the arrow in different directions by different amounts. &lt;/span&gt;.&lt;/p&gt;

&lt;h2 id=&quot;god-does-play-dice&quot;&gt;God &lt;em&gt;does&lt;/em&gt; play dice&lt;/h2&gt;

&lt;p&gt;In the strange world of quantum mechanics, when we make observations, those same observations affect the state of the system. In this case, when we &lt;strong&gt;measure&lt;/strong&gt; a qubit it will always appear to be a classical &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, &lt;em&gt;never anything else&lt;/em&gt;. It is said that the state &lt;em&gt;collapses&lt;/em&gt; to one of these values&lt;label for=&quot;collapse&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;collapse&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Measurement_problem&quot;&gt;measurement problem&lt;/a&gt; because no one really knows for certain &lt;em&gt;why&lt;/em&gt; or &lt;em&gt;how&lt;/em&gt; this happens. There is evidence that when considering the measuring equipment as a quantum mechanical system in itself then the collapse can be considered as altering the state on the whole system to bring both into alignment. Einstein famously was not convinced. &lt;/span&gt;. What is more, the &lt;em&gt;probability&lt;/em&gt; that it will collapse to one state or another is related directly to how close it is to that state, i.e. how close to the poles.&lt;/p&gt;

&lt;p&gt;For example, if we identify the &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; state as &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; state as &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; then if the arrow of our quantum bit is pointing up vertically it will almost certainly be &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; when measured, if it’s pointing down then it’s almost certain to be measured as &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. If its pointing sideways then it could result in either &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; with equal likelihood. It is indeterministic, God really does play dice.&lt;/p&gt;

&lt;p&gt;Believe it or not this view of a qubit has been validated by experiment time and again. Specially prepared light particles, sub-atomic particles and even atoms behave in exactly this way. It leads to some very useful results in its own right, like true random number generation, but the real power doesn’t come until we combine multiple bits into a single state.&lt;/p&gt;

&lt;h2 id=&quot;combining-two-qubits&quot;&gt;Combining Two Qubits&lt;/h2&gt;

&lt;p&gt;We know how to combine classical bits, it’s just the binary number system that we use everyday. For example, the combination of 2 bits have exactly 4 possible states, namely 00, 01, 10 and 11. Notice that although each bit exists separately, to have meaning the bits need to be considered together, as a single register, in a given combined state.&lt;/p&gt;

&lt;p&gt;In a similar way quantum bits can be combined into quantum registers and, just as we saw that a quantum bit can be considered a mix or &lt;em&gt;superposition&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; states, so can the quantum registers be considered a superposition of their possible states, although unfortunately there is no easy way to intuitively visualise them as there is with the Bloch sphere of a single quantum bit.&lt;/p&gt;

&lt;p&gt;In other words, the quantum register is some weighted superposition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; plus &lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt; plus &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;Up&lt;/code&gt; plus &lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;Down&lt;/code&gt;. The weights of the components define the combined state, just as it did in the single qubit case.&lt;/p&gt;

&lt;h2 id=&quot;entanglement&quot;&gt;Entanglement&lt;/h2&gt;

&lt;p&gt;When measured, a 2-bit quantum register will collapse to just one of 4 possible states, just as in the classical case.&lt;/p&gt;

&lt;p&gt;What’s remarkable about quantum registers is that the number of possible states for the register &lt;em&gt;before&lt;/em&gt; measurement is greater than the number of states that could be produced from two single quantum bits working separately.&lt;/p&gt;

&lt;p&gt;Let that sink in.&lt;/p&gt;

&lt;p&gt;Two linked, or &lt;em&gt;entangled&lt;/em&gt;, quantum bits forming a 2-bit quantum register can be in a state which is not a combination of individual qubits! What’s more, the measurement of one qubit collapses &lt;em&gt;both&lt;/em&gt; qubits into a particular state, even if they are separated by great distances.&lt;/p&gt;

&lt;p&gt;Einstein called this “spooky action at a distance” and the physical mechanisms behind it are still a mystery&lt;label for=&quot;entanglement&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;entanglement&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;See &lt;a href=&quot;https://www.youtube.com/watch?v=XGulRS2IyF8&quot;&gt;this video&lt;/a&gt; for an esoteric and entertaining attempt explanation of this phenomenon. &lt;/span&gt;. Nonetheless it has been show and confirmed by many experiments and it is one of the remarkable facts that gives quantum computing its immense power and set it apart from classical computing.&lt;/p&gt;

&lt;h1 id=&quot;quantum-computers-are-not-reliable&quot;&gt;Quantum computers are not reliable&lt;/h1&gt;

&lt;p&gt;As programmers we’re no longer accustomed to dealing with bit errors. Under the covers, however, errors are common in data storage and transmission but reliability is achieved through built-in &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_detection_and_correction&quot;&gt;detection and recovery mechanisms&lt;/a&gt; which solve this problem for us. These mechanisms usually by work by adding redundancy to the data itself and this redundancy is also required in quantum computing meaning that they can never reach their theoretical maximum capacity.&lt;/p&gt;

&lt;p&gt;The current state of the art in quantum computing is very far from the reliability of traditional computing. The error rates are such that results must be assumed to be wrong some of the time.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;We have seen how to extend a classical bit to the quantum world. We have also seen how these bits differ for their classical counterparts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Quantum bits (&lt;em&gt;qubits&lt;/em&gt;) have a whole continuum of states, not just the binary states of a classical bit.&lt;/li&gt;
  &lt;li&gt;Even though qubits have a continuum of possible states, when observed or &lt;em&gt;measured&lt;/em&gt;, they &lt;em&gt;collapse&lt;/em&gt;, permanently, to one of the classical binary states.&lt;/li&gt;
  &lt;li&gt;Qubits can be combined into &lt;em&gt;registers&lt;/em&gt; and these registers have more possible states than the combinations of the individual qubits. This means when one qubit is measured and collapses to a particular binary state then the other qubits in the register must also change, even if separated by enormous distances. This effect is known as &lt;em&gt;entanglement&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This area of computing is in its infancy and basic things that we take for granted must be reevaluated. On the other hand these properties taken together give us access to a powerful new programming paradigm. This introduction is just the very beginning.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Aug 2018 22:32:00 +0200</pubDate>
        <link>/articles/quantum-computing-primer-part-1a</link>
        <guid isPermaLink="true">/articles/quantum-computing-primer-part-1a</guid>
        
        <category>quantum computing</category>
        
        
      </item>
    
      <item>
        <title>Argument Maps</title>
        <description>&lt;p&gt;Ron Jeffries is a well known writer on agile (or is it Agile?) practices in the software industry. He has a very active &lt;a href=&quot;https://twitter.com/ronjeffries&quot;&gt;Twitter account&lt;/a&gt; and his posts tend to have a nice logical and empirical style. He has recently been talking about the value (or not) of &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_development_effort_estimation&quot;&gt;estimation&lt;/a&gt; in the software creation process. One series of posts included the nicely rounded claim that “&lt;a href=&quot;https://twitter.com/hashtag/noestimates&quot;&gt;#noestimates&lt;/a&gt;” is a good hashtag :) Very interesting.&lt;/p&gt;

&lt;p&gt;On the other hand I’ve been lurking on &lt;a href=&quot;https://www.kialo.com/&quot;&gt;Kialo&lt;/a&gt; and reading about &lt;a href=&quot;https://en.wikipedia.org/wiki/Argument_map&quot;&gt;argument map&lt;/a&gt;s in general. Argument maps are basically a type of diagram which helps visualise the flow of reasoning between different claims and objections and can be used to make better decisions. They appeal to my rather pedantic attitude to language and seem to be a great tool to have in the toolbox.&lt;/p&gt;

&lt;p&gt;So I thought it might be interesting to break down Ron’s #noestimates reasoning using this technique and maybe learn something new on the way.&lt;/p&gt;

&lt;p&gt;To create the diagram the first thing to do is to extract the claims from the text. It is normal in these situations for some claims to be repeated, mixed together and restated in other terms. What’s great about the argument map is that at the end of the process not only do you have a distilled version of the original claims but, more importantly, a list of the assumptions or premises underlying the argument. These are often the places where disagreement is hiding and can be very enlightening.&lt;/p&gt;

&lt;p&gt;The following is an extract from Ron’s post with the claims highlighted in &lt;strong&gt;bold&lt;/strong&gt;. Between each numbered point I’ve added a note (as objectively as possible) to map the text to one or more unambiguous claims. Let’s see how it goes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1. &lt;em&gt;So I was thinking about #noestimates.
 I’d think we could agree that &lt;strong&gt;IF estimates were not needed we would not use them&lt;/strong&gt; (i), &lt;strong&gt;because waste&lt;/strong&gt; (ii). (If not I have something interesting to learn.)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Point (i) is a claim reasoned from a (so far incomplete) supporting claim (ii). Don’t worry this second claim is expanded below.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2. &lt;em&gt;And &lt;strong&gt;WHEN they’re not needed, we’d not use them&lt;/strong&gt;, I should think?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In terms of an argument map this claim is simply a stronger restatement of 1.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3. &lt;em&gt;Now I want to suggest that &lt;strong&gt;estimates are always waste&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an independent claim drawn from 4.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4. &lt;em&gt;&lt;strong&gt;They are not product&lt;/strong&gt; (i) (I hope) so &lt;strong&gt;they are automatically waste&lt;/strong&gt; (ii).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clearly two separate claims. The second is a restatement of 3 substituting “automatically” with the synonym “always” so we can combine the two claims into one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;5. &lt;em&gt;&lt;strong&gt;We should want to get rid of them&lt;/strong&gt; on those grounds. (See Waste)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I first thought that this was a repetition of 1 &amp;amp; 2 but it’s not. It’s implicitly relying on a further claim, which is made in point 7.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;6. &lt;em&gt;Now I am somewhat bemused by people actually arguing FOR estimates, rather than saying “well, they are waste, but unfortunately &lt;strong&gt;they are often necessary&lt;/strong&gt;, so we should be good at them”. Maybe someone will explain that to me. But that’s not my point.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I love this. Ron somewhat generously mentions a potential objection to claim 5. It’ll be interesting to see where this objection sits and its relationship to the rest of the argument.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;7. &lt;em&gt;&lt;strong&gt;Since they are waste&lt;/strong&gt; (i), &lt;strong&gt;if they are not necessary&lt;/strong&gt; (ii), surely &lt;strong&gt;we all would like to get rid of them&lt;/strong&gt; (iii), save only the people whose job it is to produce estimates. Their hands are not clean and we’ll ignore them.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Claims supporting point 5. The same point is expanded further in point 9. Note the second claim, couched with an “if” is actually a predicate. Let’s see where that ends up on the map.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;8. &lt;em&gt;Now I want to tell you a story…..[snip]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anecdotal. Here Ron relates a story from his previous experience. It supports the point he’s making but does not make any further claims so I’ll skip it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;9. &lt;em&gt;Since &lt;strong&gt;estimates are always overhead, always waste&lt;/strong&gt; (i), &lt;strong&gt;every such elimination&lt;/strong&gt;, [&lt;strong&gt;if it can be done readily, at lower cost than the original estimation&lt;/strong&gt; (iii)], it &lt;strong&gt;SHOULD be done&lt;/strong&gt; (ii), because &lt;strong&gt;we should always reduce waste&lt;/strong&gt; (iv).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a difficult statement to parse. It restates claims 3 and 7 (i) &amp;amp; (iv) but with a caveat about costs involved (iii). From a philosophical point of view the claim “&lt;em&gt;every such elimination SHOULD be done&lt;/em&gt;” is a classic example of &lt;a href=&quot;https://www.youtube.com/watch?v=eT7yXG2aJdY&quot;&gt;Hume’s Is-Ought&lt;/a&gt; problem where statements of fact are translated to general prescriptive rules. It’s no problem for our argument map though.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;10. &lt;em&gt;What is &lt;strong&gt;the limit of this activity&lt;/strong&gt;? &lt;strong&gt;We should keep eliminating waste&lt;/strong&gt;, including waste from estimates &lt;strong&gt;until there is none&lt;/strong&gt;. &lt;strong&gt;The limit is: NO ESTIMATES&lt;/strong&gt; (ii).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again repeating claims made in 1, 2, 5, 7 and 9 - this is the main point it would seem - but this time with a further claim about the limiting case.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;11. &lt;em&gt;That’s why &lt;strong&gt;it’s a good idea&lt;/strong&gt; and why it’s probably &lt;strong&gt;a good hashtag&lt;/strong&gt; as well.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And last but not least we have the headline claim about the hashtag being a good one :)&lt;/p&gt;

&lt;p&gt;The next step is to translate the claims and their supporting claims into a tree structure. The online mind mapping tool MindMup has a free &lt;a href=&quot;http://argument.mindmup.com/&quot;&gt;argument visualizer&lt;/a&gt; which works great. This is the result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/custom/img/blog/2018-07-29-argument-maps/argument-map.png&quot; alt=&quot;Argument Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was actually quite hard to be totally objective but I think it gives a faithful summary of the flow of reasoning. At the top we have the main contention and underneath a hierarchy of other claims that support it.&lt;/p&gt;

&lt;p&gt;It actually felt a little bit like &lt;em&gt;refactoring&lt;/em&gt; the argument, extracting the relationships between claims and simplifying by removing redundancy and repetition.&lt;/p&gt;

&lt;p&gt;It seems the most interesting things in these diagrams are often the leaves of the tree which, having no supporting claims and therefore represent the premises and assumptions of the author. In this case we have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Estimates are not product [so they are waste].&lt;/li&gt;
  &lt;li&gt;We should always reduce waste.&lt;/li&gt;
  &lt;li&gt;The limit of eliminating waste is to continue until there is none.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ergo, #noestimates!&lt;/p&gt;

&lt;p&gt;If you don’t agree with these points then you probably don’t agree with the conclusion. &lt;/p&gt;

&lt;p&gt;On the other hand, it’s interesting to see that the conditionals (4.1 and 6.3, yellow in the diagram) and the objection that Ron himself mentions (6.2) are basically limiting the scope to saying “&lt;em&gt;if it can be done then it should be done&lt;/em&gt;”. Valuable in itself and I think that’s Ron’s general point rather than more extreme interpretations that you might hear. &lt;/p&gt;

&lt;p&gt;Ron makes the same points in a later post stating the bottom line as:  “We always could stop estimating, but it’s not always the right thing to do. It’s always legitimate to think about it.”&lt;/p&gt;

&lt;p&gt;It’s also clear where you might insert more claims or objections to the argument in general. For example, you might object to the point that not being product would directly imply waste. My personal opinion is that in &lt;em&gt;some&lt;/em&gt; projects the business value of a feature is a function of time, and therefore estimates allow a more precise calculation of value and therefore better decisions and better products. I could insert this objection below the “estimates are always waste” claim. This ability to insert claims and objections makes it an excellent tool for collaborative and constructive decision making, as is done in sites like Kialo.&lt;/p&gt;

&lt;p&gt;In conclusion, I found argument maps to be a great way to distill a piece of text and identify the key claims and premises and actually gain a better understanding. It’s also easier to see where further claims or objections might fit making it an great tool for collaboration. I’ll certainly be using it more often especially for technical decisions and on longer and more complicated arguments.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Many thanks to my collegue &lt;a href=&quot;publications/author/raquel-m-carmena/&quot;&gt;&lt;strong&gt;Rachel M. Carmena&lt;/strong&gt;&lt;/a&gt; for her review, suggestions and encouragement.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Jul 2018 10:00:00 +0200</pubDate>
        <link>/articles/argument-maps</link>
        <guid isPermaLink="true">/articles/argument-maps</guid>
        
        <category>communication</category>
        
        <category>logic</category>
        
        
      </item>
    
      <item>
        <title>Evolution of a Unit Test</title>
        <description>&lt;p&gt;Continuing the series of notes taken by a TDD apprentice. This post covers a day in the life of a unit test. In this case it happens to be a GUI unit test but it applies broadly, I think.&lt;/p&gt;

&lt;h2 id=&quot;it-started-with-a-test&quot;&gt;It started with a test…&lt;/h2&gt;

&lt;p&gt;The application is a JavaFX GUI for loading and modifying resource bundle property files. We decided that the first test to drive the development will display an unadorned window with a button to load a resource bundle. Applying Uncle Bob’s &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd&quot;&gt;Three Rules of TDD&lt;/a&gt; our first unit test looks like this…&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_call_load_bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This just ensures that the method &lt;code class=&quot;highlighter-rouge&quot;&gt;bundleLoader#loadBundle()&lt;/code&gt; is called when we press the button. We’ve used &lt;a href=&quot;https://github.com/TestFX/TestFX&quot;&gt;TextFX&lt;/a&gt; to drive the GUI and &lt;a href=&quot;http://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt; to create a stub for a “bundle loader” interface (which still does not exist) and we make sure it is called exactly once when the &lt;code class=&quot;highlighter-rouge&quot;&gt;#loadBundle&lt;/code&gt; button is pressed. This test doesn’t just fail, it doesn’t even compile (This is TDD!) so we bootstrapped the JavaFX application and painted an empty screen with a button. We also generated a BundleLoader interface (and I mean generated because the IDE quick-fixes practically did it for us), wrote some code (lambdas are cool) and, voila, green bar. This is what TDD is supposed to feel like.&lt;/p&gt;

&lt;p&gt;Next we wanted to allow the user to select a file to load. We clearly couldn’t open a file selection dialog box in a unit test so we cleverly encapsulated the file selection behaviour behind an interface, mocked it and passed the selected file to the bundle loader. Sound good?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_call_load_bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loaded&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We did some coding and made that go green but we started realising that this was beginning to smell bad. Why? Well first we noticed that we have have significantly increased coupling, not just in one but in two ways:&lt;/p&gt;

&lt;p&gt;We’ve coupled ourselves to a second interface (the &lt;code class=&quot;highlighter-rouge&quot;&gt;fileSelector&lt;/code&gt;) for very little gain.
We’ve broadened the &lt;code class=&quot;highlighter-rouge&quot;&gt;BundleLoader&lt;/code&gt; interface (adding a new parameter), increasing coupling that way too (see this blog post)
Maybe &lt;code class=&quot;highlighter-rouge&quot;&gt;fileSelector&lt;/code&gt; would be better passed in as a dependency to the bundle loader? Let’s see. The test becomes…&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_call_load_bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loaded&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Better, we’ve reduced the coupling again and the test is clean. Now we have a working button but there’s another problem… it doesn’t do anything useful. We realised that we’ve tested a nonsensical outcome too. We don’t really want to see a “Loaded” message. We want to see a loaded bundle in a table!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_call_load_bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s better and involved the carefree deletion of useless code&lt;label for=&quot;branchpoints&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;branchpoints&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Note to self: testing tends to be concise and trouble free when there are few branch points in the code, as is the case here. Branch point introduce complexity and complicate the testing. &lt;/span&gt;. There’s more stuff going on like building the test data for the mock/stub and we’re not testing &lt;code class=&quot;highlighter-rouge&quot;&gt;BundleLoader&lt;/code&gt; at all. Nonetheless we’ve written an impressive amount of tested GUI with these 3 lines of test code and we haven’t even run the app yet.&lt;/p&gt;

&lt;p&gt;Temptation overwhelms us as we generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;BundleLoader&lt;/code&gt; implementation with test data (remember we’re decoupled from the FileSelector interface now, proof that the design is less coupled), run the app and amazingly it works first time!&lt;/p&gt;

&lt;p&gt;Back now to TDD.&lt;/p&gt;

&lt;p&gt;Our GUI won’t just be a table but also have a textarea to hold the key. How to we test that? Easy:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_display_translations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyColumnModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSelectionModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;category.key1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s starting to smell bad again. To make the test make sense we had to induce behaviour from the test, namely selecting the first row. Actually this identifies a problem with the GUI itself because the initial state was undefined. Realising this we simplify the test again and move the default selection into the GUI code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_display_table_and_first_translation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;category.key1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This test seems obvious now, and that’s a very positive sign, but we’ve seen how hard simplicity can sometimes be. Now, with only 4 lines of clean test code we have a working (stubbed) GUI. It’s easy now to add the final remaining functionality, the text values for the different languages in the bundle. It’s nearly the same as the previous case.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_display_table_and_first_translation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clickOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#loadBundle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;category.key1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ta_&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clave de prueba&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ta_en&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verifyThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ta_ca&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clau de prova&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That is now the whole GUI happy path tested for this first TDD iteration. A couple of key takeaways.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From the evolution of the test we can see that &lt;strong&gt;striving to simplify the test has resulted in better design decisions and cleaner code&lt;/strong&gt;. The application even worked first time! We are still missing corner case testing (IOExceptions should be handled elegantly) but a big chunk of the functionality has been driven out and tested.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The resulting &lt;strong&gt;test is fairly resistant to refactoring&lt;/strong&gt;. We might decide to split the GUI up into composite controls and refactor the internals of the BundleLoader but that will have little or no effect on the test.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A corollary of the previous point is that this is a unit test that spans more than one class. The unit being the GUI behaviour. &lt;strong&gt;The unit of testing is a behaviour, NOT a class&lt;/strong&gt; (as I once erroneously believed).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talking of refactoring, the app was improved by &lt;strong&gt;worry-free, aggressive refactoring&lt;/strong&gt; during the development, something which could be done without the fear of breaking the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The resulting test is small and easy to read while covering large swathes of the GUI. It surprised even us the &lt;strong&gt;excellent coverage achieved by a small, well designed test.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Several TDD skills honed today. These are my notes from a real project. I post them in the hope that someone might find them useful.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 11:18:00 +0200</pubDate>
        <link>/articles/evolution-of-a-unit-test</link>
        <guid isPermaLink="true">/articles/evolution-of-a-unit-test</guid>
        
        <category>tdd</category>
        
        
      </item>
    
      <item>
        <title>Expected Loss of a Unit Test</title>
        <description>&lt;p&gt;During my explorations of TDD I have found myself reading and hearing all sorts of opinions about its effectiveness. In the extreme cases the polemic is absolute, both camps seem to be 100% convinced of the truth of their views, which, as in other walks of life, is usually a sign that they are seeing the same truth from different perspectives.&lt;/p&gt;

&lt;p&gt;In the case of the “&lt;a href=&quot;https://www.researchgate.net/publication/3248924_Professionalism_and_Test-Driven_Development&quot;&gt;TDD is the minimum in professionality&lt;/a&gt;” vs “&lt;a href=&quot;http://david.heinemeierhansson.com/2014/test-induced-design-damage.html&quot;&gt;TDD is destroying your design&lt;/a&gt;” debate I’m coming to the (actually obvious) realisation that the underlying truth that both sides are seeing but approaching in different ways is to get Code That Works&lt;sup&gt;(TM)&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Making the case for the latter point of view it’s interesting to read James O Coplien’s excellent article “&lt;a href=&quot;http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf&quot;&gt;Why Most Unit Testing is a Waste&lt;/a&gt;” (and I recommend that you do if you are interested in the subject). Many of the risks he sees with over-zealous unit testing (and indirectly TDD) I have noticed myself in the field and even mentioned before.&lt;/p&gt;

&lt;p&gt;For example, tests with negative value, that is tests which don’t directly test any actual business requirement but nonetheless require maintenance, pop up surprisingly regularly. They are avoided only by exercising extreme care during development and need to be actively hunted down after refactoring.&lt;/p&gt;

&lt;p&gt;Another, and I think even more pernicious problem with unit tests is that they often trick you into thinking that the code that they cover has indeed been tested. It sounds slightly ridiculous to suggest otherwise but indeed that is the case in many many situations. Tests may cover lines of code but, in any code complex enough to warrant testing then they almost certainly don’t cover all possible combinations of input and state, which become very large, very quickly (Coplien talks about trillions of combinations, without exaggeration).&lt;/p&gt;

&lt;aside&gt;Hello&lt;/aside&gt;

&lt;p&gt;Unit testing is not a silver bullet. Unit tests, along with a large part of the best practices of computer sciences are a tool for making quality software. Quality in this case means low failure rates. However I feel that unit testing has almost single handedly been bearing the burden of the quality measure. Have we forgotten the alternatives?&lt;/p&gt;

&lt;h2 id=&quot;write-code-that-is-hard-to-get-wrong&quot;&gt;Write Code that is Hard to Get Wrong&lt;/h2&gt;

&lt;p&gt;Programming is communication. Communication between programmer and machine. The more obvious that communication is, the harder it is to make a mistake. Once again this applies generally, not just to code. Simpler communication is less likely to be misunderstood.&lt;/p&gt;

&lt;p&gt;A question often asked when starting to write unit tests is: should we write tests for accessor methods? Is a setter method hard to get wrong? It’s not impossible but very nearly.&lt;/p&gt;

&lt;h3 id=&quot;whats-for-sure-is-that-sometimes-the-expected-loss-of-writing-a-test-is-much-greater-that-the-expected-loss-of-not-writing-it&quot;&gt;What’s for sure is that sometimes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Expected_loss&quot;&gt;&lt;em&gt;expected loss&lt;/em&gt;&lt;/a&gt; of writing a test is much greater that the &lt;em&gt;expected loss&lt;/em&gt; of &lt;strong&gt;not&lt;/strong&gt; writing it.&lt;/h3&gt;

&lt;p&gt;What does that mean? It means that in terms of time and resources the cost (expected loss) of just writing the test is non-zero, let’s say 1 minute, not to mention the cost of executing and maintaining it over time.&lt;/p&gt;

&lt;p&gt;On the other hand the cost of NOT writing it is probably near 0, in fact it may actually be 0 if the function was correct all along.&lt;/p&gt;

&lt;p&gt;But what if I accidentally write a setter like this?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have done this maybe once or twice in my professional career so the probability of it happening again is maybe several tens of thousands to one, let’s just say 10,000:1 for arguments sake. What’s the expected loss? Say it takes half an hour to find the bug and another minute to fix it. The total cost in the statistical sense is &lt;em&gt;31 minutes * 0.00001&lt;/em&gt; that is to say &lt;em&gt;186ms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So we see the expected loss of not writing this test is a fraction of the expected loss of writing it.&lt;/p&gt;

&lt;p&gt;It could also be the case that this error turns into some insidious bug which causes your company to lose millions… the probability of that is so low that the expected loss stays negligible (we could probably estimate that too if you’re concerned).&lt;/p&gt;

&lt;p&gt;It’s a similar concept to pot-odds in poker. Do I play or fold? Check the risk/reward FTW.&lt;/p&gt;

&lt;p&gt;Can we reduce the expected loss further? Of course, for example we could try to avoid the setter altogether. It can’t go wrong if it doesn’t exist. That may or may not be possible but it’s a worthy goal.&lt;/p&gt;

&lt;p&gt;Another way is to change to a property based language (like Kotlin) or use something like Lombok. In this latter case we have:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Setter&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This has an even lower expected loss, even when including the overhead of installing Lombok in your IDE.&lt;/p&gt;

&lt;p&gt;So this is also why &lt;strong&gt;short methods are good&lt;/strong&gt;. Because they’re &lt;strong&gt;harder to get wrong and therefore the expected loss is lower&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A real example. I found myself with a code base with several dozen methods of this type:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ask ourselves “can this go wrong?” Hardly, it would seem. It’s even (mis-)using the weird looking C++ technique to avoid setting data to null accidentally. But actually there were several cases where it did go wrong, the name of the methods did not exactly match, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;getValue()&lt;/code&gt; accessed &lt;code class=&quot;highlighter-rouge&quot;&gt;data.getVal()&lt;/code&gt;, for example. This caused a mismatch and the corresponding bug. Should all 20 or so of these methods be tested then? Let’s first see if we can reduce the expected loss.&lt;/p&gt;

&lt;p&gt;First we could try and factor out all that boilerplate using lambdas or something. That could get ugly very quickly. Let’s take a step back. It turned out that actually &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; should never be null. It could be null because no earlier checks has been added but that’s different. We can ensure that data is never null by making it final and setting it to a non-null value in the constructor. That way we can reduce the above code to a single call to a getter and hence reduce expected loss.&lt;/p&gt;

&lt;p&gt;What this shows it that expected loss not only can be reduced by simplifying, it can also be reduced using design by contract. In this case the contract states that “data” cannot be null, a fact that we check once at construction time or even statically in the case of a null-safe language like Kotlin. We thus remove a whole swathe of null checks and additional code. Remember any code has a non-zero expected loss.&lt;/p&gt;

&lt;p&gt;We can go further… the new reduced methods are just delegates. If we use Kotlin or Lombok to generate our delegate method there would be no need to write these methods at all, reducing expected loss and completely eliminating the need for testing.&lt;/p&gt;

&lt;h2 id=&quot;a-big-mistake&quot;&gt;A Big Mistake&lt;/h2&gt;

&lt;p&gt;One of the biggest mistakes of the last decade has been the promotion of dynamic typing to production code. Why is dynamic typing so bad? Well, it’s not for a toy problem and saves you some actual typing (as in key presses) but it raises expected loss. Why? Because static typing reduces the probability of failure, due to the wrong type of argument, for example… it’s harder to get wrong.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;The statistical technique of using expected loss is a useful approach to measure software quality. If we are looking for low failure rates in code it may not necessarily make sense to just add more tests, what may be more effective is to reduce the risk by refactoring to simpler code which is harder to get wrong.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 11:18:00 +0200</pubDate>
        <link>/articles/expected-loss-and-unit-tests</link>
        <guid isPermaLink="true">/articles/expected-loss-and-unit-tests</guid>
        
        <category>tdd</category>
        
        
      </item>
    
      <item>
        <title>SOLID Principles, Cohesion and Coupling</title>
        <description>&lt;p&gt;A few years ago I was given a coding problem as part of a recruitment process for a very well known software consultancy. Fair enough, I thought. Doesn’t seem too hard, I thought. A couple of hours and it’ll be in the bag.&lt;/p&gt;

&lt;p&gt;I failed the test and was thrown out on my ear with very little ceremony.&lt;/p&gt;

&lt;p&gt;What went wrong? Easy, two things…. Object Oriented Design and TDD skills.&lt;/p&gt;

&lt;p&gt;The solution I submitted had good unit-test coverage, was easy enough to understand, built incrementally, self-documenting, and all the rest it. I’d even go so far as to say it was reasonably well designed by my own pragmatic criteria. It even worked.&lt;/p&gt;

&lt;p&gt;However it did not stand up to scrutiny. A public getter here, a redundant test there, an integration test skulking amongst the unit tests, and that was the end of it. Literal failure.&lt;/p&gt;

&lt;p&gt;How did this happen? I have been doing (or, now it seems, failing to do) OOD for over 15 years. I have read more than many on the subject and worked hard to understand the principles. I am a convert to the cause but somehow my skills still didn’t cut the mustard. Likewise TDD. (To my defense, although my day job as technical manager in a bank should expose me daily to these skill sets, it doesn’t.)&lt;/p&gt;

&lt;p&gt;So… back to the books (one was recommended to me by the recruiter) and the trusty IDE to hone those skills. This series of posts is to document the journey.&lt;/p&gt;

&lt;p&gt;Back to basics. What is OOD? We all know some textbook examples: a &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle&lt;/code&gt; and has &lt;code class=&quot;highlighter-rouge&quot;&gt;Wheels&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Amplifiers&lt;/code&gt; depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;Speakers&lt;/code&gt;, etc. Choose your metaphor. I’m not here to go over that. I’m interested in the design skills to design good systems and they rarely have anything to do with cars and wheels but rather processors and parsers and formatters and caches and tasks and orders…..&lt;/p&gt;

&lt;p&gt;So lets start with the basic &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&quot;&gt;&lt;strong&gt;SOLID principles&lt;/strong&gt; of OOD&lt;/a&gt;. There are a million books and internet articles on these principles first proposed in the early 2000s. I don’t want to rehash that but rather document some insights I have gained by going back over them and to the skills required to put them into practice. SOLID starts with S….&lt;/p&gt;

&lt;h2 id=&quot;s---separation-of-responsibilities&quot;&gt;S - Separation of responsibilities&lt;/h2&gt;

&lt;p&gt;A seemingly simple principle and easy to apply, right? Wrong. After going back over the basic definitions, it turns out there is a great deal of subtlety here. Robert C Martin’s justification for this principle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If a class has more than one responsibility, then the responsibilities become coupled. Changes to one responsibility may impair or inhibit the class’ ability to meet the others. This kind of coupling leads to fragile designs that break in unexpected ways when changed.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… however later he goes on to state,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If, on the other hand, the application is not changing in ways that cause the the two responsibilities to change at different times, then there is no need to separate them.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understanding subtle contradictions like these is actually where the “skill” in OOP lies. Sweeping statements about separation of concerns don’t hold if those concerns are so tightly bound that they will always change in tandem. Stated in another way:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“An axis of change is only an axis of change if the changes actually occur.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whether or not the changes actually occur may not be immediately apparent or may only become apparent with domain knowledge or driven by testing (a future article) but this will not always be the case. Changes to requirements very often, if not in the majority of cases, affect the design in unexpected ways. Should we design for unexpected changes? There are different schools of thought but in the end experience will be the guide.&lt;/p&gt;

&lt;p&gt;Lets now jump straight over to the I in SOLID because it has some relevance…&lt;/p&gt;

&lt;h2 id=&quot;i---interface-segregation&quot;&gt;I - Interface segregation&lt;/h2&gt;

&lt;p&gt;An interface specifies a contract, a contract is a single responsibility, or so my logic went. How can an object with multiple interfaces not be implementing multiple responsibilities? I feel to square this circle we should forget the word “responsibility” for a moment and talk about cohesion.&lt;/p&gt;

&lt;p&gt;I have a book called “The Practical Guide to Structured Systems Design” (SSD) written back in 1980 and I feel that many of the concepts explained in that book are as relevant here as they were nearly 40 years ago, and maybe more clearly explained because the world was simpler then.&lt;/p&gt;

&lt;p&gt;Cohesion is a measure of the strength of functional relatedness of elements within a module.&lt;/p&gt;

&lt;p&gt;Change “module” to “class” and the definition holds for OOD. I contend that “&lt;strong&gt;responsibility&lt;/strong&gt;” is giving a name to a set of “&lt;strong&gt;strongly related elements&lt;/strong&gt;” or “&lt;strong&gt;stuff which goes together&lt;/strong&gt;”, in the case of OOD both data and behaviour, grouped by some abstract concept. I had made the mistake of equating responsibility with behaviour. This seems obvious now, which is encouraging because that’s what happens when you learn new skills - things seem obvious when they didn’t before.&lt;/p&gt;

&lt;p&gt;Now, related elements may certainly have different functional interfaces. An amplifier may have a jack plug socket and co-axial connections but it is nonetheless cohesive and has a single responsibility in that sense.&lt;/p&gt;

&lt;p&gt;Incidentally, the interface segregation principle is also intimately related to the concept of coupling which also elucidates the meaning of this principle. SSD encourages the use of “Narrow (as opposed to broad) connections” to weaken coupling, a concept taken from Yourdon in the 1970s. Essentially &lt;strong&gt;a client depending on a smaller interface has a narrower connection and is therefore less likely to change&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-key-takeaway-is-that-the-interface-segregation-principle-minimises-coupling-while-the-single-responsibility-principle-maximises-cohesion&quot;&gt;The key takeaway is that the &lt;strong&gt;interface segregation principle minimises coupling&lt;/strong&gt; while the &lt;strong&gt;single responsibility principle maximises cohesion&lt;/strong&gt;.&lt;/h3&gt;

&lt;p&gt;For fun, lets look at the other principles in SOLID in terms of cohesion and coupling.&lt;/p&gt;

&lt;h2 id=&quot;d---dependency-inversion&quot;&gt;D - Dependency inversion&lt;/h2&gt;

&lt;p&gt;The interface of a class (or interface) must, by definition, be equal to or narrower than its sub-classes (or sub-interfaces). This principle states that, where possible, we should use narrower super-classes rather than broader sub-classes, just what we need to reduce coupling. If a client depends on the narrower (or equal) interface of the super-class rather than the sub-class then that must minimise the coupling. &lt;strong&gt;The farther we go up the class hierarchy the smaller the interface and the lower the coupling&lt;/strong&gt;.  If we assume the Liskov principle as well (below) then the interface will always behave as expected. All good. Not much skill involved here..&lt;/p&gt;

&lt;p&gt;Now lets do the O.&lt;/p&gt;

&lt;h2 id=&quot;o---openclosed-principle&quot;&gt;O - Open/closed principle&lt;/h2&gt;

&lt;p&gt;Open for extension, closed for modification. Lets put this in terms of cohesion and coupling. In OO we must consider not only public interfaces but protected ones too, that is, the “interface” from classes to their super-classes. Visualise being inside the class “looking up” at the super class: we see everything except the private methods. That interface represents a connection which can be narrow or broad. And we know that &lt;strong&gt;narrow interfaces reduce coupling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we want restrict that interface, right?&lt;/p&gt;

&lt;p&gt;No so fast. There is another concern and that is how extensible a class is. More extensible classes tend to have broader protected interfaces. The balancing of extensibility with reducing super-class coupling is another &lt;strong&gt;skill&lt;/strong&gt; to be learned.&lt;/p&gt;

&lt;p&gt;But wait. The superclass interface can also be modified by overriding methods. It’s not actually modifying the source code in the original sense but rather modifying the behaviour as seen by a client…. which leads us finally to L:&lt;/p&gt;

&lt;h2 id=&quot;l---the-liskov-substitution-principle&quot;&gt;L - the Liskov substitution principle&lt;/h2&gt;

&lt;p&gt;Clients are connected to classed not only by their interface defined as methods and data, but also by their behaviour. A kind of semantic coupling. A class can break the contract of the interface of the super-class, which in turn may break a client, which is bad.&lt;/p&gt;

&lt;p&gt;That’s it for this post. This journey will continue…&lt;/p&gt;

</description>
        <pubDate>Mon, 15 May 2017 18:52:00 +0200</pubDate>
        <link>/articles/solid-vs-cohesion-and-coupling</link>
        <guid isPermaLink="true">/articles/solid-vs-cohesion-and-coupling</guid>
        
        <category>oop</category>
        
        <category>programming</category>
        
        
      </item>
    
  </channel>
</rss>
